{"version":3,"sources":["Reducer/Reducer.js","Components/TodoEntry.js","Components/TodoItem.js","Components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["initialState","module","exports","state","action","type","data","payload","TodoEntry","props","addNewWork","e","preventDefault","title","current","value","length","dispatch","focus","componentDidMount","render","className","href","target","onSubmit","middle","placeholder","ref","color","React","createRef","Component","connect","TodoItem","completedChecked","completedHandler","setState","currentTarget","checked","completed","id","remove","removed","key","xs","checkedStatus","onChange","onClick","ids","TodoItems","list","numCompleted","show","all","uncompleted","status","push","filter","i","newList","Number","showAll","showUncompleted","showCompleted","componentDidUpdate","preProps","undefined","includes","App","store","createStore","Reducer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.015357b6.chunk.js","sourcesContent":["const initialState = {\r\n\r\n};\r\n\r\nconst Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"ADDNEWWORK\":\r\n            return {\r\n                data: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nmodule.exports = Reducer;","import React, { Component } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\r\nimport './../CSS/Outline-none.css';\r\nimport './../CSS/FontFamily.css';\r\nimport { connect } from 'react-redux';\r\n\r\nclass TodoEntry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.title = React.createRef();\r\n    };\r\n\r\n    // add new work to the list\r\n    addNewWork = e => {\r\n        e.preventDefault();\r\n\r\n        if (this.title.current.value.length > 0) {\r\n            this.props.dispatch({ type: \"ADDNEWWORK\", payload: this.title.current.value });\r\n\r\n            this.title.current.value = \"\";\r\n            this.title.current.focus();\r\n        };\r\n    };\r\n\r\n    // focus on input when TodoEntry component is loaded\r\n    componentDidMount = () => this.title.current.focus();\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <MDBContainer className=\"text-center col-12 col-md-8 col-lg-6\">\r\n                    <MDBRow>\r\n                        <MDBCol>\r\n                            <MDBRow>\r\n                                <MDBCol>\r\n                                    <h1 className=\"text-primary royal-font\">Todo App</h1>\r\n                                    <a href=\"https://github.com/yasin6606\" target=\"_blank\" className=\"text-decoration-none\"><sub className=\"text-danger font-weight-bold text-right d-block\">Created By Yassin Gourkani</sub></a>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                            <MDBRow className=\"mt-3 border rounded-top bg-white\">\r\n                                <MDBCol className=\"py-2 col-12\">\r\n                                    <form onSubmit={this.addNewWork}>\r\n                                        <MDBRow className=\"d-flex justify-content-between px-2\">\r\n                                            <MDBCol middle={true} className=\"px-0 col-9 col-md-10\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"What needs to be done ? \"\r\n                                                    ref={this.title}\r\n                                                    className=\"px-2 py-2 border-0 col-12 shadow-none\"\r\n                                                />\r\n                                            </MDBCol>\r\n                                            <MDBCol middle={true} className=\"py-1 px-0 col-3 col-md-2\">\r\n                                                <MDBBtn color=\"warning\" className=\"font-weight-bolder royal-font\" type=\"submit\">ADD</MDBBtn>\r\n                                            </MDBCol>\r\n                                        </MDBRow>\r\n                                    </form>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nexport default connect()(TodoEntry);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MDBRow, MDBCol, MDBInput } from 'mdbreact';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport './../CSS/Line-on-text.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.checkedStatus = React.createRef();\r\n    };\r\n\r\n    state = {\r\n        completedChecked: false,\r\n    };\r\n\r\n    // handler check box to completed or not\r\n    completedHandler = e => {\r\n        this.setState({ completedChecked: e.currentTarget.checked });\r\n\r\n        // this.props.status = e.currentTarget.checked\r\n\r\n        this.props.completed(e.currentTarget.checked, this.props.id);\r\n    };\r\n\r\n    // call remove function from prop to remove specific item from the list\r\n    remove = () => this.props.removed(this.props.id);\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <MDBRow className=\"text-left py-3 border-bottom d-flex justify-content-between px-3\" key={this.props.id}>\r\n                    <MDBCol xs=\"10\">\r\n                        <MDBRow>\r\n                            <MDBCol middle={true}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    value=\"off\"\r\n                                    ref={this.checkedStatus}\r\n                                    onChange={this.completedHandler}\r\n                                />\r\n                            </MDBCol>\r\n                            <MDBCol middle={true}>\r\n                                <p className={`font-weight-bold h5 ${this.state.completedChecked && `line-through text-secondary italic`}`}>{this.props.title}</p>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBCol>\r\n                    <MDBCol xs=\"2\">\r\n                        <FaTimes className=\"text-warning\" onClick={this.remove} />\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nexport default connect()(TodoItem);","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\r\nimport { connect } from 'react-redux';\r\nimport './../CSS/fontSize.css';\r\n\r\n// this is initial list of id of works that completed\r\nlet ids = [];\r\n\r\nclass TodoItems extends Component {\r\n\r\n    state = {\r\n        id: 0,\r\n        list: [],\r\n        numCompleted: 0,\r\n        show: {\r\n            all: true,\r\n            completed: false,\r\n            uncompleted: false,\r\n        },\r\n    };\r\n\r\n    // completed handler status\r\n    completedHandler = (status, id) => {\r\n        if (status === true) {\r\n            ids.push(id);\r\n        } else if (status === false) {\r\n            ids = ids.filter(i => i !== id);\r\n        };\r\n\r\n        this.setState({ numCompleted: ids.length });\r\n    };\r\n\r\n    // remove item by click on times icon\r\n    remove = e => {\r\n        let newList = this.state.list.filter(i => Number(i.key) !== Number(e))\r\n\r\n        this.setState({ list: newList });\r\n    };\r\n\r\n    // show all works\r\n    showAll = () => {\r\n        this.setState({ show: { all: true } });\r\n    };\r\n\r\n    // show uncompleted works\r\n    showUncompleted = () => {\r\n        this.setState({ show: { uncompleted: true } });\r\n    };\r\n\r\n    // show completed works\r\n    showCompleted = () => {\r\n        this.setState({ show: { completed: true } });\r\n    };\r\n\r\n    componentDidUpdate = preProps => {\r\n        // first check last prop with current prop, after that call componentDidMount to refresh list of works and show new work.\r\n        if (preProps.data !== this.props.data) {\r\n            this.componentDidMount();\r\n        };\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        // first check incoming value of input, if it doesn't exist or not empty, send value for create new item.\r\n        if (this.props.data !== undefined) {\r\n            this.setState({\r\n                id: this.state.id + 1,\r\n                list: [\r\n                    <TodoItem\r\n                        key={this.state.id}\r\n                        id={this.state.id}\r\n                        title={this.props.data}\r\n                        completed={this.completedHandler}\r\n                        status={false}\r\n                        removed={this.remove}\r\n                    />,\r\n                    ...this.state.list,\r\n                ],\r\n            });\r\n        };\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <MDBContainer className=\"text-left col-12 col-md-8 col-lg-6 py-3\">\r\n                    <MDBRow className={this.props.data ? null : \"d-none\"}>\r\n                        <MDBCol className=\"text-info\">\r\n                            {\r\n                                (this.state.show.all === true && this.state.list) ||\r\n                                (this.state.show.completed === true && this.state.list.filter(i => ids.includes(Number(i.key)))) ||\r\n                                (this.state.show.uncompleted === true && this.state.list.filter(i => !ids.includes(Number(i.key))))\r\n                            }\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol>\r\n                            <MDBRow className=\"d-flex justify-content-between\">\r\n                                <MDBCol xs=\"5\" className=\"py-3\" middle={true}>\r\n                                    <p className=\"m-0 text-info tinyFontSize font-weight-bold\">\r\n                                        {this.state.list.filter(i => !ids.includes(Number(i.key))).length} item(s) left\r\n                                    </p>\r\n                                </MDBCol>\r\n                                <MDBCol xs=\"7\" className=\"py-3\" middle={true}>\r\n                                    <MDBRow>\r\n                                        <MDBCol className=\"text-right\">\r\n                                            <MDBBtn className=\"text-info tinyFontSize\" onClick={this.showAll}>All</MDBBtn>\r\n                                        </MDBCol>\r\n                                        <MDBCol className=\"text-right\">\r\n                                            <MDBBtn className=\"text-info tinyFontSize\" onClick={this.showUncompleted}>Active</MDBBtn>\r\n                                        </MDBCol>\r\n                                        <MDBCol className=\"text-right\">\r\n                                            <MDBBtn className=\"text-info tinyFontSize\" onClick={this.showCompleted}>Completed</MDBBtn>\r\n                                        </MDBCol>\r\n                                    </MDBRow>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </>\r\n        );\r\n    };\r\n};\r\nconst mapStateToProps = state => {\r\n    return {\r\n        data: state.data\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TodoItems);","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport Reducer from './Reducer/Reducer';\r\nimport TodoEntry from './Components/TodoEntry';\r\nimport TodoItems from './Components/TodoItems';\r\nimport { MDBContainer } from 'mdbreact';\r\nimport './CSS/Bg-image.css';\r\n\r\nfunction App() {\r\n\r\n  const store = createStore(Reducer);\r\n\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n          <MDBContainer className=\"mt-5\">\r\n            <TodoEntry />\r\n            <TodoItems />\r\n          </MDBContainer>\r\n        </BrowserRouter>\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'w3-css/w3.css';\r\nimport 'w3-css/4/w3pro.css';\r\nimport '../node_modules/vazir-font/dist/font-face.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}